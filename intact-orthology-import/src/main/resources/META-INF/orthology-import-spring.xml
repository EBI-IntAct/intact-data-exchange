<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/batch
           http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">

    <bean class="org.springframework.retry.annotation.RetryConfiguration" />

    <context:component-scan base-package="uk.ac.ebi.intact.jami" />
    <context:component-scan base-package="psidev.psi.mi.jami.batch" />
    <context:component-scan base-package="uk.ac.ebi.intact.ortholog" />


    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath*:/META-INF/orthology-import.properties"/>
    </bean>

    <!-- basic job repository -->
    <bean id="basicBatchJobRepository"
          class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"
          p:isolationLevelForCreate="ISOLATION_DEFAULT"
          p:dataSource-ref="jamiCoreDataSource" p:transactionManager-ref="jamiTransactionManager" />

    <!-- basic batch job launcher -->
    <bean id="basicBatchJobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="basicBatchJobRepository" />
        <property name="taskExecutor" ref="syncTaskExecutor" />
    </bean>

    <bean id="syncTaskExecutor" class="org.springframework.core.task.SyncTaskExecutor"/>

    <!-- Basic job explorer -->
    <bean id="basicBatchJobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"
          p:tablePrefix="ia_meta.BATCH_"
          p:dataSource-ref="jamiCoreDataSource" />

    <!-- Simple job registry -->
    <bean id="basicBatchJobRegistry" class="psidev.psi.mi.jami.batch.SimpleJobRegistry"/>

    <!-- basic batch job operator -->
    <bean id="basicBatchJobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator">
        <property name="jobExplorer" ref="basicBatchJobExplorer"/>
        <property name="jobRepository" ref="basicBatchJobRepository" />
        <property name="jobRegistry" ref="basicBatchJobRegistry" />
        <property name="jobLauncher" ref="basicBatchJobLauncher" />
    </bean>

    <!-- listeners -->
    <bean id="basicChunkLoggerListener" class="psidev.psi.mi.jami.batch.BasicChunkLoggerListener"/>
    <bean id="basicJobLoggerListener" class="psidev.psi.mi.jami.batch.SimpleJobListener"/>

    <!-- Basic Step configuration -->
    <bean id="basicBatchStep" abstract="true"
          class="org.springframework.batch.core.step.factory.SimpleStepFactoryBean" lazy-init="true">
        <property name="transactionManager" ref="jamiTransactionManager"/>
        <property name="jobRepository" ref="basicBatchJobRepository"/>
        <property name="startLimit" value="5"/>
        <property name="commitInterval" value="50"/>
    </bean>

    <!-- Basic Job configuration -->
    <bean id="basicBatchJob" abstract="true" class="org.springframework.batch.core.job.SimpleJob">
        <property name="jobRepository" ref="basicBatchJobRepository"/>
    </bean>

    <!-- Basic job manager configuration -->
    <bean id="psiMIJobManager" class="psidev.psi.mi.jami.batch.MIBatchJobManager">
        <property name="jobRepository" ref="basicBatchJobRepository"/>
        <property name="jobOperator" ref="basicBatchJobOperator"/>
    </bean>

    <context:annotation-config/>
    <tx:annotation-driven proxy-target-class="true"/>

    <!-- so the @Transactional annotations work -->
    <tx:annotation-driven transaction-manager="jamiTransactionManager"/>

    <!--
        Post-processor to perform exception translation on @Repository classes
        (from native exceptions such as JPA PersistenceExceptions to
        Spring&rsquo;s DataAccessException hierarchy).
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
    <!--  BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations,
    for injection of the corresponding JPA resources EntityManagerFactory and EntityManager.
    Any such annotated fields or methods in any Spring-managed object will automatically be injected.
    This post-processor will inject sub-interfaces of EntityManagerFactory and EntityManager if the annotated
    fields or methods are declared as such. The actual type will be verified early, with the exception of
    a shared ("transactional") EntityManager reference, where type mismatches might be detected as late as on
    the first actual invocation. -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- for autowired annotations to work propertly -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!-- JPATransactionManager is not dependent on hibernate. It is a more global platform -->
    <!-- We use entity manager because it is JPA and not just specific to hibernate -->
    <bean id="jamiTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
        <property name="dataSource" ref="jamiCoreDataSource"/>
        <qualifier value="jamiTransactionManager"/>
    </bean>


    <!-- The LocalContainerEntityManagerFactoryBean gives full control over EntityManagerFactory configuration
    and is appropriate for environments where fine-grained customization is required-->
    <bean id="intactEntityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="intact-jami"/>
        <property name="persistenceXmlLocation" value="classpath*:/META-INF/jami-persistence.xml"/>
        <property name="dataSource" ref="jamiCoreDataSource"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.enable_lazy_load_no_trans">true</prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">${db.hbm2ddl}</prop>
                <prop key="hibernate.default_schema">intact</prop>
            </props>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform" value="${db.dialect}"/>
                <property name="showSql" value="false"/>
                <property name="generateDdl" value="false"/>
            </bean>
        </property>
    </bean>
    <!-- Intact core basic datasource -->
    <bean id="jamiCoreDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.user}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <!-- INTACT more specific beans -->
    <bean id="jamiUserContext" class="uk.ac.ebi.intact.jami.context.UserContext" scope="prototype">
        <property name="userId" value="${jami.user.context.id}"/>
    </bean>

    <bean id="intactJamiConfiguration" class="uk.ac.ebi.intact.jami.context.IntactConfiguration" scope="prototype">
        <property name="acPrefix" value="${ac.prefix}"/>
        <property name="defaultInstitution" ref="sourceIntact"/>
    </bean>

    <!-- Default institutions -->
    <bean id="sourceIntact" class="uk.ac.ebi.intact.jami.model.extension.IntactSource">
        <constructor-arg index="0" value="intact"/>
        <property name="fullName" value="European Bioinformatics Institute"/>
        <property name="MIIdentifier" value="MI:0469"/>
        <property name="url" value="http://www.ebi.ac.uk/intact/"/>
        <property name="postalAddress" value="European Bioinformatics Institute; Wellcome Trust Genome Campus; Hinxton, Cambridge; CB10 1SD; United Kingdom"/>
    </bean>

    <bean id="orthologsManager" class="uk.ac.ebi.intact.ortholog.OrthologsManager">
<!--        <constructor-arg index="0" value="reportFile"/>-->
<!--        <constructor-arg index="1" value="filePath"/>-->
<!--        <constructor-arg index="2" value="urlPanther"/>-->
    </bean>

    <bean id="orthologsFileReader" class="uk.ac.ebi.intact.ortholog.OrthologsFileReader">
    </bean>

    <bean id="orthologsFileParser" class="uk.ac.ebi.intact.ortholog.OrthologsFileParser">
    </bean>

    <bean id="orthologsProteinAssociation" class="uk.ac.ebi.intact.ortholog.OrthologsProteinAssociation">
        <constructor-arg index="0" ref="intactDao"/>
    </bean>

    <bean id="orthologsXrefWriter" class="uk.ac.ebi.intact.ortholog.OrthologsXrefWriter">
    </bean>



    <!--    &lt;!&ndash; Import Steps &ndash;&gt;-->
<!--    <batch:step id="orthologyImportStep" parent="basicBatchStep">-->
<!--        <batch:tasklet transaction-manager="jamiTransactionManager">-->
<!--            <batch:listeners>-->
<!--                <batch:listener ref="basicChunkLoggerListener"/>-->
<!--            </batch:listeners>-->

<!--            <batch:chunk reader="orthologsFileReader"-->
<!--                         processor="orthologsFileParser">-->

<!--                <batch:retryable-exception-classes>-->
<!--                    <batch:include class="org.springframework.batch.item.ItemStreamException"/>-->
<!--                    <batch:include class="javax.net.ssl.SSLHandshakeException"/>-->
<!--                </batch:retryable-exception-classes>-->

<!--                <batch:streams>-->
<!--                    <batch:stream ref="orthologsFileReader"/>-->
<!--                    <batch:stream ref="orthologsFileParser"/>-->
<!--                </batch:streams>-->
<!--            </batch:chunk>-->
<!--        </batch:tasklet>-->
<!--    </batch:step>-->

<!--    &lt;!&ndash;Import jobs &ndash;&gt;-->
<!--    <batch:job id="orthologyImport" job-repository="basicBatchJobRepository" parent="basicBatchJob">-->

<!--        <batch:listeners>-->
<!--            <batch:listener ref="basicJobLoggerListener"/>-->
<!--        </batch:listeners>-->

<!--        <batch:step id="importStep" parent="orthologyImportStep"/>-->
<!--    </batch:job>-->
</beans>
