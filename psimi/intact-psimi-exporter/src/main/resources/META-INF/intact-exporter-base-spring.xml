<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/batch
           http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">

    <context:component-scan base-package="uk.ac.ebi.intact.dataexchange.psimi.exporter" />
    <context:component-scan base-package="uk.ac.ebi.intact.jami" />

    <context:component-scan base-package="psidev.psi.mi.jami.batch" />

    <!-- basic job repository -->
    <bean id="basicBatchJobRepository"
          class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"
          p:tablePrefix="ia_meta.BATCH_"
          p:isolationLevelForCreate="ISOLATION_DEFAULT"
          p:dataSource-ref="jamiCoreDataSource"
          p:transactionManager-ref="jamiTransactionManager" />

    <!-- basic batch job launcher -->
    <bean id="basicBatchJobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="basicBatchJobRepository" />
        <property name="taskExecutor" ref="syncTaskExecutor" />
    </bean>

    <!-- syncTaskExecutor -->
    <bean id="syncTaskExecutor" class="org.springframework.core.task.SyncTaskExecutor"/>

    <!-- Basic job explorer -->
    <bean id="basicBatchJobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"
          p:tablePrefix="ia_meta.BATCH_"
          p:dataSource-ref="jamiCoreDataSource" />

    <!-- Simple job registry -->
    <bean id="basicBatchJobRegistry" class="psidev.psi.mi.jami.batch.SimpleJobRegistry"/>

    <!-- basic batch job operator -->
    <bean id="basicBatchJobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator">
        <property name="jobExplorer" ref="basicBatchJobExplorer"/>
        <property name="jobRepository" ref="basicBatchJobRepository" />
        <property name="jobRegistry" ref="basicBatchJobRegistry" />
        <property name="jobLauncher" ref="basicBatchJobLauncher" />
    </bean>

    <!-- listeners -->
    <bean id="basicChunkLoggerListener" class="psidev.psi.mi.jami.batch.BasicChunkLoggerListener"/>
    <bean id="basicJobLoggerListener" class="psidev.psi.mi.jami.batch.SimpleJobListener"/>

    <!-- Basic Step configuration -->
    <bean id="basicBatchStep" abstract="true"
          class="org.springframework.batch.core.step.factory.SimpleStepFactoryBean" lazy-init="true">
        <property name="transactionManager" ref="jamiTransactionManager"/>
        <property name="jobRepository" ref="basicBatchJobRepository"/>
        <property name="startLimit" value="5"/>
        <property name="commitInterval" value="50"/>
    </bean>

    <!-- Basic Job configuration -->
    <bean id="basicBatchJob" abstract="true" class="org.springframework.batch.core.job.SimpleJob">
        <property name="jobRepository" ref="basicBatchJobRepository"/>
    </bean>

    <!-- Basic job manager configuration -->
    <bean id="psiMIJobManager" class="psidev.psi.mi.jami.batch.MIBatchJobManager">
        <property name="jobRepository" ref="basicBatchJobRepository"/>
        <property name="jobOperator" ref="basicBatchJobOperator"/>
    </bean>
    <context:annotation-config/>
    <tx:annotation-driven proxy-target-class="true"/>

    <!-- so the @Transactional annotations work -->
    <tx:annotation-driven transaction-manager="jamiTransactionManager"/>

    <!--
        Post-processor to perform exception translation on @Repository classes
        (from native exceptions such as JPA PersistenceExceptions to
        Spring&rsquo;s DataAccessException hierarchy).
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
    <!--  BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations,
    for injection of the corresponding JPA resources EntityManagerFactory and EntityManager.
    Any such annotated fields or methods in any Spring-managed object will automatically be injected.
    This post-processor will inject sub-interfaces of EntityManagerFactory and EntityManager if the annotated
    fields or methods are declared as such. The actual type will be verified early, with the exception of
    a shared ("transactional") EntityManager reference, where type mismatches might be detected as late as on
    the first actual invocation. -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- for autowired annotations to work propertly -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!-- JPATransactionManager is not dependent on hibernate. It is a more global platform -->
    <!-- We use entity manager because it is JPA and not just specific to hibernate -->
    <bean id="jamiTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
        <property name="dataSource" ref="jamiCoreDataSource"/>
        <qualifier value="jamiTransactionManager"/>
    </bean>


    <!-- The LocalContainerEntityManagerFactoryBean gives full control over EntityManagerFactory configuration
    and is appropriate for environments where fine-grained customization is required-->
    <bean id="intactEntityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="intact-jami"/>
        <property name="persistenceXmlLocation" value="classpath*:/META-INF/jami-persistence.xml"/>
        <property name="dataSource" ref="jamiCoreDataSource"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">${db.hbm2ddl}</prop>
                <prop key="hibernate.connection.release_mode">after_transaction</prop>
                <prop key="hibernate.default_schema">intact</prop>
            </props>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform" value="${db.dialect}"/>
                <property name="showSql" value="false"/>
                <property name="generateDdl" value="false"/>
            </bean>
        </property>
    </bean>
    <!-- Intact core basic datasource -->
    <bean id="jamiCoreDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.user}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <!-- INTACT more specific beans -->
    <bean id="jamiUserContext" class="uk.ac.ebi.intact.jami.context.UserContext" scope="prototype">
        <property name="userId" value="${jami.user.context.id}"/>
    </bean>

    <bean id="intactJamiConfiguration" class="uk.ac.ebi.intact.jami.context.IntactConfiguration" scope="prototype">
        <property name="acPrefix" value="${ac.prefix}"/>
        <property name="defaultInstitution" ref="sourceIntact"/>
    </bean>

    <!-- Default institutions -->
    <bean id="sourceIntact" class="uk.ac.ebi.intact.jami.model.extension.IntactSource">
        <constructor-arg index="0" value="intact"/>
        <property name="fullName" value="European Bioinformatics Institute"/>
        <property name="MIIdentifier" value="MI:0469"/>
        <property name="url" value="http://www.ebi.ac.uk/intact/"/>
        <property name="postalAddress" value="European Bioinformatics Institute; Wellcome Trust Genome Campus; Hinxton, Cambridge; CB10 1SD; United Kingdom"/>
    </bean>

    <bean id="releaseFileNameGenerator" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.util.FileNameGenerator">
        <property name="separator" value="_"/>
        <property name="negativeTag" value="negative"/>
        <property name="characterToTruncate" value="("/>
    </bean>

    <bean id="spokeExpansion" class="psidev.psi.mi.jami.binary.expansion.InteractionEvidenceSpokeExpansion" lazy-init="true"/>

    <bean id="asyncTaskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>

    <bean id="releaseFileNameTruncator" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.util.NameTruncation">
        <property name="nameSeparator" value="_"/>
    </bean>

    <bean id="releasePublicationFilter"  class="uk.ac.ebi.intact.dataexchange.psimi.exporter.util.PublicationFileFilter">
        <property name="separator" value="_"/>
    </bean>

    <bean id="datasetNameTruncator" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.util.NameTruncation">
        <property name="nameSeparator" value=" - "/>
    </bean>

    <!-- Compressors -->
    <bean id="zipCompressor" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.Compressor">
        <property name="compression" value="zip"/>
    </bean>

    <bean id="mailStepListener" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.listener.MailNotifierStepExecutionListener" scope="prototype" lazy-init="true">
        <property name="mailSender">
            <bean class="org.springframework.mail.javamail.JavaMailSenderImpl">
                <property name="host" value="${intact.notification.email.smtpHost}"/>
            </bean>
        </property>
        <property name="senderAddress" value="${intact.notification.email.sender}"/>
        <property name="recipients" value="${intact.notification.email.recipients}"/>
    </bean>

    <!-- readers -->
    <!-- simple publication reader ordered by created date. It excludes the IntAct paper -->
    <bean id="intactPublicationReader" class="org.springframework.batch.item.database.JpaPagingItemReader" lazy-init="true" scope="prototype">
        <property name="queryString" value="select i from IntactPublication i
        where i.shortLabel &lt;&gt; :intactPub
        order by i.created, i.ac"/>
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
        <property name="parameterValues">
            <map>
                <entry key="intactPub" value="14681455"/>
            </map>
        </property>
    </bean>
    <!-- individual file archive writer -->
    <bean id="intactFileArchiveWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.ArchiveFileWriter" lazy-init="true" scope="prototype">
        <property name="compressor" ref="zipCompressor"/>
        <property name="errorLogName" value="${release.buildFolder}/archive_individual_file_error.log"/>
    </bean>
    <!-- reader of the publications, ordered by the species of the interactions, the large scale limit, the shortlabel of the publication,
    the taxid of the biosource and the number of interactions for a publication-->
    <bean id="intactPublicationOrderedBySpeciesReader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.species.classification.PublicationSpeciesReader"
          lazy-init="true" scope="prototype">
        <property name="dataSource" ref="jamiCoreDataSource"/>
    </bean>
    <!-- the reader will read publication shortlabel, publication created year and dataset. It will order the results first by dataset and then by publication id-->
    <bean id="intactPublicationOrderedByDatasetReader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.dataset.PublicationDatasetReader"
          lazy-init="true" scope="prototype">
        <property name="dataSource" ref="jamiCoreDataSource"/>
    </bean>

    <!-- writers -->
    <!-- species classification writer -->
    <bean id="intactPublicationSpeciesClassificationWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.species.classification.SpeciesClassificationWriter"
          lazy-init="true" scope="prototype">
        <property name="speciesParentFolderName" value="${release.buildFolder}/species"/>
        <property name="extension" value="txt"/>
        <property name="taxidSeparator" value=":"/>
    </bean>

    <!-- steps -->
    <!-- export species classification files -->
    <batch:step id="species.classificationStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactPublicationOrderedBySpeciesReader"
                         writer="intactPublicationSpeciesClassificationWriter"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="intactPublicationOrderedBySpeciesReader"/>
                    <batch:stream ref="intactPublicationSpeciesClassificationWriter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>

    <!-- jobs -->
    <!-- job which export species classification files -->
    <batch:job id="species.classificationJob" restartable="true" job-repository="basicBatchJobRepository">
        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <batch:step id="p.createSpeciesIndexes" parent="species.classificationStep">
            <batch:tasklet task-executor="syncTaskExecutor"/>
        </batch:step>
    </batch:job>

</beans>