<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/batch
           http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">

    <import resource="classpath*:/META-INF/intact-exporter-base-spring.xml"/>

    <!-- XML publication filter-->
    <bean id="releaseXmlPublicationFilter"  class="uk.ac.ebi.intact.dataexchange.psimi.exporter.util.PublicationFileFilter">
        <property name="separator" value="_"/>
        <property name="extension" value=".xml"/>
    </bean>

    <!-- readers -->
    <!-- simple archive reader for xml25 -->
    <bean id="publicationXml25ArchiveReader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.IndividualFileArchiveReader" lazy-init="true">
        <property name="fileNameTruncation" ref="releaseFileNameTruncator"/>
        <property name="directory" value="${release.folder}/psi25/pmid"/>
        <property name="extensions">
            <list>
                <value>xml</value>
            </list>
        </property>
    </bean>
    <!-- simple archive reader for xml30 -->
    <bean id="publicationXml30ArchiveReader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.IndividualFileArchiveReader" lazy-init="true">
        <property name="fileNameTruncation" ref="releaseFileNameTruncator"/>
        <property name="directory" value="${release.folder}/psi30/pmid"/>
        <property name="extensions">
            <list>
                <value>xml</value>
            </list>
        </property>
    </bean>

    <!-- publication file readers XML 2.5 per species -->
    <bean id="speciesClassificationXml25Reader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.species.SpeciesClassificationChunkReader" lazy-init="true">
        <property name="fileNameGenerator" ref="releaseFileNameGenerator"/>
        <property name="publicationFilter" ref="releaseXmlPublicationFilter"/>
        <property name="taxidSeparator" value=":"/>
        <property name="extension" value="txt"/>
        <property name="pmidFolderPath" value="${release.folder}/psi25/pmid"/>
        <property name="speciesFolderName" value="${release.buildFolder}/species"/>
        <property name="errorLogName" value="${release.buildFolder}/species_reader25_error.log"/>
        <property name="largeScale" value="2000"/>
        <property name="dataSourceOptions">
            <map>
                <entry key="input_format_key" value="psimi_xml"/>
                <entry key="streaming_key" value-type="java.lang.Boolean" value="true"/>
                <entry key="complex_type_key" value-type="psidev.psi.mi.jami.model.ComplexType" value="n_ary"/>
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="mixed"/>
            </map>
        </property>
    </bean>
    <!-- publication file readers XML 3.0 per species -->
    <bean id="speciesClassificationXml30Reader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.species.SpeciesClassificationChunkReader" lazy-init="true">
        <property name="fileNameGenerator" ref="releaseFileNameGenerator"/>
        <property name="publicationFilter" ref="releaseXmlPublicationFilter"/>
        <property name="taxidSeparator" value=":"/>
        <property name="extension" value="txt"/>
        <property name="pmidFolderPath" value="${release.folder}/psi30/pmid"/>
        <property name="speciesFolderName" value="${release.buildFolder}/species"/>
        <property name="errorLogName" value="${release.buildFolder}/species_reader30_error.log"/>
        <property name="largeScale" value="2000"/>
        <property name="dataSourceOptions">
            <map>
                <entry key="input_format_key" value="psimi_xml"/>
                <entry key="streaming_key" value-type="java.lang.Boolean" value="true"/>
                <entry key="complex_type_key" value-type="psidev.psi.mi.jami.model.ComplexType" value="n_ary"/>
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="mixed"/>
            </map>
        </property>
    </bean>
    <!-- species archive reader xml 2.5-->
    <bean id="speciesXml25ArchiveReader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.IndividualFileArchiveReader" lazy-init="true">
        <property name="fileNameTruncation" ref="releaseFileNameTruncator"/>
        <property name="extensions">
            <list>
                <value>xml</value>
            </list>
        </property>
        <property name="directory" value="${release.folder}/psi25/species"/>
    </bean>
    <!-- species archive reader xml 3.0-->
    <bean id="speciesXml30ArchiveReader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.IndividualFileArchiveReader" lazy-init="true">
        <property name="fileNameTruncation" ref="releaseFileNameTruncator"/>
        <property name="extensions">
            <list>
                <value>xml</value>
            </list>
        </property>
        <property name="directory" value="${release.folder}/psi30/species"/>
    </bean>
    <!-- dataset xml 2.5 archive reader -->
    <bean id="intactDatasetArchiveXml25Reader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.SubDirectoryArchiveReader" lazy-init="true">
        <property name="directory" value="${release.folder}/psi25/datasets"/>
    </bean>
    <!-- dataset xml 3.0 archive reader -->
    <bean id="intactDatasetArchiveXml30Reader" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.SubDirectoryArchiveReader" lazy-init="true">
        <property name="directory" value="${release.folder}/psi30/datasets"/>
    </bean>

    <!-- processors -->
    <!-- IntAct XML processor which can read a publication and converts it in a sorted set of PublicationFileEntry -->
    <bean id="intactPublicationXmlProcessor" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.pmid.PublicationExportChunkProcessor" lazy-init="true">
        <property name="largeScale" value="2000"/>
        <property name="publicationNameGenerator" ref="releaseFileNameGenerator"/>
    </bean>

    <!-- writers -->
    <!-- interaction writer -->
    <!-- XML 25 publication writer -->
    <bean id="intactPublicationXml25Writer" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.pmid.PublicationFileEntryXmlWriter" lazy-init="true">
        <property name="parentFolderPaths" value="${release.folder}/psi25/pmid"/>
        <property name="fileExtension" value=".xml"/>
        <property name="writerOptions">
            <map>
                <entry key="output_format_key" value="psimi_xml"/>
                <entry key="xml25_type_key" value-type="psidev.psi.mi.jami.xml.PsiXmlType" value="compact"/>
                <entry key="write_complex_as_interactor_key" value-type="java.lang.Boolean" value="false"/>
                <entry key="xml_version_key" value-type="psidev.psi.mi.jami.xml.PsiXmlVersion" value="v2_5_4"/>
                <entry key="xml25_extended_key" value-type="java.lang.Boolean" value="false" />
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="evidence"/>
                <entry key="complex_type_key" value-type="psidev.psi.mi.jami.model.ComplexType" value="n_ary"/>
            </map>
        </property>
    </bean>
    <!-- XML 30 publication writer -->
    <bean id="intactPublicationXml30Writer" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.pmid.PublicationFileEntryXmlWriter" lazy-init="true">
        <property name="parentFolderPaths" value="${release.folder}/psi30/pmid"/>
        <property name="fileExtension" value=".xml"/>
        <property name="writerOptions">
            <map>
                <entry key="output_format_key" value="psimi_xml"/>
                <entry key="xml25_type_key" value-type="psidev.psi.mi.jami.xml.PsiXmlType" value="compact"/>
                <entry key="write_complex_as_interactor_key" value-type="java.lang.Boolean" value="false"/>
                <entry key="xml_version_key" value-type="psidev.psi.mi.jami.xml.PsiXmlVersion" value="v3_0_0"/>
                <entry key="xml25_extended_key" value-type="java.lang.Boolean" value="false" />
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="evidence"/>
                <entry key="complex_type_key" value-type="psidev.psi.mi.jami.model.ComplexType" value="n_ary"/>
            </map>
        </property>
    </bean>
    <!-- composite publication writer -->
    <bean id="intactCompositePublicationXmlWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.pmid.CompositePublicationFileEntryWriter"
          lazy-init="true">
        <property name="delegates">
            <list>
                <ref bean="intactPublicationXml25Writer"/>
                <ref bean="intactPublicationXml30Writer"/>
            </list>
        </property>
    </bean>

    <!-- XML 2.5 species writer -->
    <bean id="xml25SpeciesWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.species.SpeciesInteractionXmlWriter" lazy-init="true">
        <property name="parentFolderPaths" value="${release.folder}/psi25/species"/>
        <property name="fileNameGenerator" ref="releaseFileNameGenerator"/>
        <property name="extension" value=".xml"/>
        <property name="appendToExistingFile" value="false"/>
        <property name="writerOptions">
            <map>
                <entry key="output_format_key" value="psimi_xml"/>
                <entry key="xml25_type_key" value-type="psidev.psi.mi.jami.xml.PsiXmlType" value="compact"/>
                <entry key="write_complex_as_interactor_key" value-type="java.lang.Boolean" value="false"/>
                <entry key="xml_version_key" value-type="psidev.psi.mi.jami.xml.PsiXmlVersion" value="v2_5_4"/>
                <entry key="xml25_extended_key" value-type="java.lang.Boolean" value="true" />
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="evidence"/>
                <entry key="complex_type_key" value-type="psidev.psi.mi.jami.model.ComplexType" value="n_ary"/>
            </map>
        </property>

    </bean>
    <!-- XML 3.0 species writer -->
    <bean id="xml30SpeciesWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.species.SpeciesInteractionXmlWriter" lazy-init="true">
        <property name="parentFolderPaths" value="${release.folder}/psi30/species"/>
        <property name="fileNameGenerator" ref="releaseFileNameGenerator"/>
        <property name="extension" value=".xml"/>
        <property name="appendToExistingFile" value="false"/>
        <property name="writerOptions">
            <map>
                <entry key="output_format_key" value="psimi_xml"/>
                <entry key="xml25_type_key" value-type="psidev.psi.mi.jami.xml.PsiXmlType" value="compact"/>
                <entry key="write_complex_as_interactor_key" value-type="java.lang.Boolean" value="false"/>
                <entry key="xml_version_key" value-type="psidev.psi.mi.jami.xml.PsiXmlVersion" value="v3_0_0"/>
                <entry key="xml25_extended_key" value-type="java.lang.Boolean" value="true" />
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="evidence"/>
                <entry key="complex_type_key" value-type="psidev.psi.mi.jami.model.ComplexType" value="n_ary"/>
            </map>
        </property>
    </bean>

    <!-- xml 2.5 dataset writer -->
    <bean id="intactPublicationDatasetXml25Writer" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.dataset.PublicationDatasetWriter" lazy-init="true">
        <property name="datasetParentFolderName" value="${release.folder}/psi25/datasets"/>
        <property name="pmidFolderName" value="${release.folder}/psi25/pmid"/>
        <property name="publicationFilter" ref="releasePublicationFilter"/>
        <property name="datasetTruncation" ref="datasetNameTruncator"/>
        <property name="errorLogName" value="${release.buildFolder}/error_dataset_writer25.log"/>
    </bean>
    <!-- xml 3.0 dataset writer -->
    <bean id="intactPublicationDatasetXml30Writer" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.dataset.PublicationDatasetWriter" lazy-init="true">
        <property name="datasetParentFolderName" value="${release.folder}/psi30/datasets"/>
        <property name="pmidFolderName" value="${release.folder}/psi30/pmid"/>
        <property name="publicationFilter" ref="releasePublicationFilter"/>
        <property name="datasetTruncation" ref="datasetNameTruncator"/>
        <property name="errorLogName" value="${release.buildFolder}/error_dataset_writer30.log"/>
    </bean>
    <!-- composite dataset writer -->
    <bean id="intactCompositeDatasetXmlWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.dataset.CompositePublicationDatasetWriter"
          lazy-init="true">
        <property name="delegates">
            <list>
                <ref bean="intactPublicationDatasetXml25Writer"/>
                <ref bean="intactPublicationDatasetXml30Writer"/>
            </list>
        </property>
    </bean>

    <!-- tasklet -->
    <!-- tasklet for compressing xml 2.5 publication files -->
    <bean id="compressorXml25Tasklet" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.CompressorByFileExtensionsTasklet">
        <property name="outputFile" value="${release.folder}/psi25/pmidMIF25.zip"/>
        <property name="compressor" ref="zipCompressor"/>
        <property name="directory" value="${release.folder}/psi25/pmid"/>
        <property name="extensions">
            <list>
                <value>txt</value>
            </list>
        </property>
    </bean>
    <!-- tasklet for compressing xml 3.0 publication files -->
    <bean id="compressorXml30Tasklet" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.archive.CompressorByFileExtensionsTasklet">
        <property name="outputFile" value="${release.folder}/psi30/pmidMIF30.zip"/>
        <property name="compressor" ref="zipCompressor"/>
        <property name="directory" value="${release.folder}/psi30/pmid"/>
        <property name="extensions">
            <list>
                <value>txt</value>
            </list>
        </property>
    </bean>

    <!-- Export Steps -->
    <!-- step to export publication XML 2.5 files -->
    <batch:step id="xml25.publicationStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactPublicationReader"
                         processor="intactPublicationXmlProcessor"
                         writer="intactPublicationXml25Writer"
                         commit-interval="1">
                <batch:streams>
                    <batch:stream ref="intactPublicationReader"/>
                    <batch:stream ref="intactPublicationXmlProcessor"/>
                    <batch:stream ref="intactPublicationXml25Writer"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to export publication XML 3.0 files -->
    <batch:step id="xml30.publicationStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactPublicationReader"
                         processor="intactPublicationXmlProcessor"
                         writer="intactPublicationXml30Writer"
                         commit-interval="1">
                <batch:streams>
                    <batch:stream ref="intactPublicationReader"/>
                    <batch:stream ref="intactPublicationXmlProcessor"/>
                    <batch:stream ref="intactPublicationXml30Writer"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to export publication XML 2.5 and 3.0 files -->
    <batch:step id="xml.publicationStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactPublicationReader"
                         processor="intactPublicationXmlProcessor"
                         writer="intactCompositePublicationXmlWriter"
                         commit-interval="1">
                <batch:streams>
                    <batch:stream ref="intactPublicationReader"/>
                    <batch:stream ref="intactPublicationXmlProcessor"/>
                    <batch:stream ref="intactPublicationXml25Writer"/>
                    <batch:stream ref="intactPublicationXml30Writer"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to zip each publication XML 2.5 files -->
    <batch:step id="zip.singlePublicationXml25Step" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="publicationXml25ArchiveReader"
                         writer="intactFileArchiveWriter"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="publicationXml25ArchiveReader"/>
                    <batch:stream ref="intactFileArchiveWriter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to zip each publication XML 3.0 files -->
    <batch:step id="zip.singlePublicationXml30Step" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="publicationXml30ArchiveReader"
                         writer="intactFileArchiveWriter"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="publicationXml30ArchiveReader"/>
                    <batch:stream ref="intactFileArchiveWriter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to zip all xml 2.5 publication files -->
    <batch:step id="zip.allPublicationXml25Step" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" ref="compressorXml25Tasklet" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>
        </batch:tasklet>
    </batch:step>
    <!-- step to zip all xml 3.0 publication files -->
    <batch:step id="zip.allPublicationXml30Step" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" ref="compressorXml30Tasklet" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>
        </batch:tasklet>
    </batch:step>

    <!-- step to export xml 2.5 by species -->
    <batch:step id="xml25.speciesStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="speciesClassificationXml25Reader"
                         writer="xml25SpeciesWriter"
                         commit-interval="10" retry-limit="5">
                <batch:streams>
                    <batch:stream ref="speciesClassificationXml25Reader"/>
                    <batch:stream ref="xml25SpeciesWriter"/>
                </batch:streams>

                <batch:retryable-exception-classes>
                    <batch:include class="org.springframework.batch.item.ItemStreamException"/>
                </batch:retryable-exception-classes>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to export xml 3.0 by species -->
    <batch:step id="xml30.speciesStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="speciesClassificationXml30Reader"
                         writer="xml30SpeciesWriter"
                         commit-interval="10" retry-limit="5">
                <batch:streams>
                    <batch:stream ref="speciesClassificationXml30Reader"/>
                    <batch:stream ref="xml30SpeciesWriter"/>
                </batch:streams>

                <batch:retryable-exception-classes>
                    <batch:include class="org.springframework.batch.item.ItemStreamException"/>
                </batch:retryable-exception-classes>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to zip each species 2.5 file -->
    <batch:step id="zip.singleSpeciesXml25Step" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="speciesXml25ArchiveReader"
                         writer="intactFileArchiveWriter"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="speciesXml25ArchiveReader"/>
                    <batch:stream ref="intactFileArchiveWriter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to zip each species 3.0 file -->
    <batch:step id="zip.singleSpeciesXml30Step" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="speciesXml30ArchiveReader"
                         writer="intactFileArchiveWriter"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="speciesXml30ArchiveReader"/>
                    <batch:stream ref="intactFileArchiveWriter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>

    <!-- step to export each dataset 2.5 file -->
    <batch:step id="xml25.datasetStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactPublicationOrderedByDatasetReader"
                         writer="intactPublicationDatasetXml25Writer"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="intactPublicationOrderedByDatasetReader"/>
                    <batch:stream ref="intactPublicationDatasetXml25Writer"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to export each dataset 3.0 file -->
    <batch:step id="xml30.datasetStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactPublicationOrderedByDatasetReader"
                         writer="intactPublicationDatasetXml30Writer"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="intactPublicationOrderedByDatasetReader"/>
                    <batch:stream ref="intactPublicationDatasetXml30Writer"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to export each dataset 2.5 and 3.0 file -->
    <batch:step id="xml.datasetStep" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactPublicationOrderedByDatasetReader"
                         writer="intactCompositeDatasetXmlWriter"
                         commit-interval="1">
                <batch:streams>
                    <batch:stream ref="intactPublicationOrderedByDatasetReader"/>
                    <batch:stream ref="intactPublicationDatasetXml25Writer"/>
                    <batch:stream ref="intactPublicationDatasetXml30Writer"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to zip datasets xml 2.5 -->
    <batch:step id="zip.datasetXml25Step" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactDatasetArchiveXml25Reader"
                         writer="intactFileArchiveWriter"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="intactDatasetArchiveXml25Reader"/>
                    <batch:stream ref="intactFileArchiveWriter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <!-- step to zip datasets xml 3.0 -->
    <batch:step id="zip.datasetXml30Step" job-repository="basicBatchJobRepository">
        <batch:tasklet start-limit="100" transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="intactDatasetArchiveXml30Reader"
                         writer="intactFileArchiveWriter"
                         commit-interval="50">
                <batch:streams>
                    <batch:stream ref="intactDatasetArchiveXml30Reader"/>
                    <batch:stream ref="intactFileArchiveWriter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>

    <!-- Export job -->
    <!-- Job which will export interactions in XML publication files -->
    <batch:job id="exportPublicationXmlJob" job-repository="basicBatchJobRepository">

        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <!-- Export interactions per publication in XML -->
        <batch:step  id="exportPublicationXml" parent="xml.publicationStep">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="zip.publicationXml25"/>
        </batch:step>
        <!-- flow1: zip all individual xml25 files -->
        <batch:step id="zip.publicationXml25" parent="zip.singlePublicationXml25Step">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="zip.publicationXml30"/>
        </batch:step>
        <!-- flow2: zip all individual xml30 files -->
        <batch:step  id="zip.publicationXml30" parent="zip.singlePublicationXml30Step">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="zip.allPublicationXml25"/>
        </batch:step>
        <!-- flow3: zip all files in one xml25 archive -->
        <batch:step id="zip.allPublicationXml25" parent="zip.allPublicationXml25Step">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="zip.allPublicationXml30"/>
        </batch:step>
        <!-- flow4: zip all files in one xml30 archive -->
        <batch:step id="zip.allPublicationXml30" parent="zip.allPublicationXml30Step">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
        </batch:step>
    </batch:job>

    <!-- Job which will export interactions by species in XML publication files -->
    <batch:job id="exportSpeciesXmlJob" restartable="true" job-repository="basicBatchJobRepository">
        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <batch:step id="p.createSpeciesClassification" parent="species.classificationStep">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="p25.createSpecies"/>
        </batch:step>
        <batch:step id="p25.createSpecies" parent="xml25.speciesStep">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="zip.species25"/>
        </batch:step>
        <batch:step id="zip.species25" parent="zip.singleSpeciesXml25Step">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="p30.createSpecies"/>
        </batch:step>
        <batch:step id="p30.createSpecies" parent="xml30.speciesStep">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="zip.species30"/>
        </batch:step>
        <batch:step id="zip.species30" parent="zip.singleSpeciesXml30Step">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
        </batch:step>
    </batch:job>

    <!-- Job which will export interactions by dataset in XML publication files -->
    <batch:job id="xml.datasetJob" restartable="true" job-repository="basicBatchJobRepository">
        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <batch:step id="p.createDatasets" parent="xml.datasetStep">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="p.zipDatasets25"/>
        </batch:step>

        <batch:step id="p.zipDatasets25" parent="zip.datasetXml25Step">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
            <batch:next on="*" to="p.zipDatasets30"/>
        </batch:step>
        <batch:step id="p.zipDatasets30" parent="zip.datasetXml30Step">
            <batch:tasklet task-executor="syncTaskExecutor"/>
            <batch:fail on="FAILED"/>
        </batch:step>
    </batch:job>

    <!-- final job which will export all interaction evidences in a xml 2.5 and 3.0 -->
    <batch:job id="xmlExportJob" job-repository="basicBatchJobRepository">

        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <!-- Export interactions per publication/species in XML -->
        <batch:split id="xml.export2" task-executor="asyncTaskExecutor" next="xml.split">
            <!-- flow1: export all individual species files -->
            <batch:flow>
                <batch:step  id="export.publicationXml" parent="xml.publicationStep">
                    <batch:tasklet task-executor="syncTaskExecutor"/>
                </batch:step>
            </batch:flow>
            <!-- export species -->
            <batch:flow>
                <batch:step id="p.create.SpeciesClassification" parent="species.classificationStep">
                    <batch:tasklet task-executor="syncTaskExecutor"/>
                </batch:step>
            </batch:flow>
        </batch:split>

        <!-- split 2 : zip, export species, export datasets -->
        <batch:split id="xml.split" task-executor="asyncTaskExecutor">
            <!-- zip xml-->
            <batch:flow>
                <batch:split id="zip.split" task-executor="asyncTaskExecutor">
                    <!-- zip xml-->
                    <batch:flow>
                        <batch:step id="zip.publication.xml25" parent="zip.singlePublicationXml25Step">
                            <batch:tasklet task-executor="syncTaskExecutor"/>
                        </batch:step>
                    </batch:flow>
                    <batch:flow>
                        <batch:step id="zip.publication.xml30" parent="zip.singlePublicationXml25Step">
                            <batch:tasklet task-executor="syncTaskExecutor"/>
                        </batch:step>
                    </batch:flow>
                    <batch:flow>
                        <batch:step id="zip.allPublication.xml25" parent="zip.allPublicationXml25Step">
                            <batch:tasklet task-executor="syncTaskExecutor"/>
                        </batch:step>
                    </batch:flow>
                    <batch:flow>
                        <batch:step id="zip.allPublication.xml30" parent="zip.allPublicationXml30Step">
                            <batch:tasklet task-executor="syncTaskExecutor"/>
                        </batch:step>
                    </batch:flow>
                </batch:split>
            </batch:flow>

            <batch:flow>
                <batch:split id="species.split" task-executor="asyncTaskExecutor">
                    <!-- zip xml-->
                    <batch:flow>
                        <batch:step id="p.create.species25" parent="xml25.speciesStep">
                            <batch:tasklet task-executor="syncTaskExecutor"/>
                            <batch:fail on="FAILED"/>
                            <batch:next on="*" to="zip.speciesXml25"/>
                        </batch:step>
                        <batch:step id="zip.speciesXml25" parent="zip.singleSpeciesXml25Step">
                            <batch:tasklet task-executor="syncTaskExecutor"/>
                        </batch:step>
                    </batch:flow>
                    <batch:flow>
                        <batch:step id="p.create.species30" parent="xml30.speciesStep">
                            <batch:tasklet task-executor="syncTaskExecutor"/>
                            <batch:fail on="FAILED"/>
                            <batch:next on="*" to="zip.speciesXml30"/>
                        </batch:step>
                        <batch:step id="zip.speciesXml30" parent="zip.singleSpeciesXml30Step">
                            <batch:tasklet task-executor="syncTaskExecutor"/>
                        </batch:step>
                    </batch:flow>
                </batch:split>
            </batch:flow>

            <batch:flow>
                <!-- export datasets -->
                <batch:step id="p.create.datasets" parent="xml.datasetStep">
                    <batch:tasklet task-executor="syncTaskExecutor"/>
                    <batch:fail on="FAILED"/>
                    <batch:next on="*" to="p.zip.datasetsXml25"/>
                </batch:step>
                <batch:step id="p.zip.datasetsXml25" parent="zip.datasetXml25Step">
                    <batch:tasklet task-executor="syncTaskExecutor"/>
                    <batch:fail on="FAILED"/>
                    <batch:next on="*" to="p.zip.datasetsXml30"/>
                </batch:step>
                <batch:step id="p.zip.datasetsXml30" parent="zip.datasetXml30Step">
                    <batch:tasklet task-executor="syncTaskExecutor"/>
                </batch:step>
            </batch:flow>
        </batch:split>
    </batch:job>
</beans>