<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd">

    <context:component-scan base-package="uk.ac.ebi.intact.dataexchange.dbimporter" />
    <context:component-scan base-package="uk.ac.ebi.intact.dataexchange.enricher" />
    <context:component-scan base-package="uk.ac.ebi.intact.jami" />

    <context:component-scan base-package="psidev.psi.mi.jami.batch" />


    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:META-INF/h2-spring-batch.properties</value>
            </list>
        </property>
    </bean>

    <!-- The basic data source for spring batch-->
    <bean id="jamiCoreDataSourceTest" class="org.apache.commons.dbcp.BasicDataSource" lazy-init="true">
        <property name="driverClassName" value="${batch.db.driver}"/>
        <property name="url" value="${batch.db.url}"/>
        <property name="username" value="${batch.db.user}"/>
        <property name="password" value="${batch.db.password}"/>
    </bean>

    <!-- Initialize the baisc datasource for spring batch -->
    <bean id="batchDataSourceInitializer" class="psidev.psi.mi.jami.batch.BatchDataSourceInitializer">
        <property name="dataSource" ref="jamiCoreDataSourceTest"/>
        <property name="initScripts" value="${batch.db.initScripts}"/>
    </bean>

    <!-- basic job repository -->
    <bean id="basicBatchJobRepository"
          class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"
          p:isolationLevelForCreate="ISOLATION_DEFAULT"
          p:dataSource-ref="jamiCoreDataSourceTest" p:transactionManager-ref="jamiTransactionManager" />

    <!-- basic batch job launcher -->
    <bean id="basicBatchJobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="basicBatchJobRepository" />
        <property name="taskExecutor" ref="syncTaskExecutor" />
    </bean>

    <!-- syncTaskExecutor -->
    <bean id="syncTaskExecutor" class="org.springframework.core.task.SyncTaskExecutor"/>

    <!-- Basic job explorer -->
    <bean id="basicBatchJobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"
          p:dataSource-ref="jamiCoreDataSourceTest" />

    <!-- Simple job registry -->
    <bean id="basicBatchJobRegistry" class="psidev.psi.mi.jami.batch.SimpleJobRegistry"/>

    <!-- basic batch job operator -->
    <bean id="basicBatchJobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator">
        <property name="jobExplorer" ref="basicBatchJobExplorer"/>
        <property name="jobRepository" ref="basicBatchJobRepository" />
        <property name="jobRegistry" ref="basicBatchJobRegistry" />
        <property name="jobLauncher" ref="basicBatchJobLauncher" />
    </bean>

    <!-- listeners -->
    <bean id="basicChunkLoggerListener" class="psidev.psi.mi.jami.batch.BasicChunkLoggerListener"/>
    <bean id="basicJobLoggerListener" class="psidev.psi.mi.jami.batch.SimpleJobListener"/>

    <!-- Basic Step configuration -->
    <bean id="basicBatchStep" abstract="true"
          class="org.springframework.batch.core.step.factory.SimpleStepFactoryBean" lazy-init="true">
        <property name="transactionManager" ref="jamiTransactionManager"/>
        <property name="jobRepository" ref="basicBatchJobRepository"/>
        <property name="startLimit" value="5"/>
        <property name="commitInterval" value="50"/>
    </bean>

    <!-- Basic Job configuration -->
    <bean id="basicBatchJob" abstract="true" class="org.springframework.batch.core.job.SimpleJob">
        <property name="jobRepository" ref="basicBatchJobRepository"/>
    </bean>

    <!-- Basic job manager configuration -->
    <bean id="psiMIJobManager" class="psidev.psi.mi.jami.batch.MIBatchJobManager">
        <property name="jobRepository" ref="basicBatchJobRepository"/>
        <property name="jobOperator" ref="basicBatchJobOperator"/>
    </bean>

    <context:annotation-config/>
    <tx:annotation-driven proxy-target-class="true"/>

    <!-- so the @Transactional annotations work -->
    <tx:annotation-driven transaction-manager="jamiTransactionManager"/>

    <!--
        Post-processor to perform exception translation on @Repository classes
        (from native exceptions such as JPA PersistenceExceptions to
        Spring&rsquo;s DataAccessException hierarchy).
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
    <!--  BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations,
    for injection of the corresponding JPA resources EntityManagerFactory and EntityManager.
    Any such annotated fields or methods in any Spring-managed object will automatically be injected.
    This post-processor will inject sub-interfaces of EntityManagerFactory and EntityManager if the annotated
    fields or methods are declared as such. The actual type will be verified early, with the exception of
    a shared ("transactional") EntityManager reference, where type mismatches might be detected as late as on
    the first actual invocation. -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- for autowired annotations to work propertly -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!-- JPATransactionManager is not dependent on hibernate. It is a more global platform -->
    <!-- We use entity manager because it is JPA and not just specific to hibernate -->
    <bean id="jamiTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
        <property name="dataSource" ref="jamiCoreDataSourceTest"/>
        <qualifier value="jamiTransactionManager"/>
    </bean>


    <!-- The LocalContainerEntityManagerFactoryBean gives full control over EntityManagerFactory configuration
    and is appropriate for environments where fine-grained customization is required-->
    <bean id="intactEntityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="intact-jami"/>
        <property name="persistenceXmlLocation" value="classpath*:/META-INF/jami-persistence.xml"/>
        <property name="dataSource" ref="jamiCoreDataSourceTest"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">create-drop</prop>
                <!-- hibernate interceptor to clear the synchronizer caches after each transaction-->
                <prop key="hibernate.connection.release_mode">after_transaction</prop>
            </props>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform" value="org.hibernate.dialect.H2Dialect"/>
                <property name="showSql" value="false"/>
                <property name="generateDdl" value="false"/>
            </bean>
        </property>
    </bean>

    <!-- INTACT more specific beans -->
    <bean id="jamiUserContext" class="uk.ac.ebi.intact.jami.context.UserContext" scope="prototype">
        <property name="userId" value="INTACT_TESTER"/>
    </bean>

    <bean id="intactJamiConfiguration" class="uk.ac.ebi.intact.jami.context.IntactConfiguration" scope="prototype">
        <property name="acPrefix" value="EBI"/>
        <property name="defaultInstitution" ref="sourceIntact"/>
    </bean>

    <!-- Default institutions -->
    <bean id="sourceIntact" class="uk.ac.ebi.intact.jami.model.extension.IntactSource">
        <constructor-arg index="0" value="intact"/>
        <property name="fullName" value="European Bioinformatics Institute"/>
        <property name="MIIdentifier" value="MI:0469"/>
        <property name="url" value="http://www.ebi.ac.uk/intact/"/>
        <property name="postalAddress" value="European Bioinformatics Institute; Wellcome Trust Genome Campus; Hinxton, Cambridge; CB10 1SD; United Kingdom"/>
    </bean>

    <!-- intact enricher config -->
    <bean id="enricherConfig" class="uk.ac.ebi.intact.dataexchange.enricher.EnricherConfig"/>

    <bean id="enricherContext" class="uk.ac.ebi.intact.dataexchange.enricher.EnricherContext">
        <constructor-arg ref="enricherConfig"/>
    </bean>

    <bean id="enricherCacheManager" class="uk.ac.ebi.intact.dataexchange.enricher.cache.EnricherCacheManager"/>

    <!-- readers -->
    <bean id="miFileResource" class="org.springframework.core.io.FileSystemResource">
        <constructor-arg value="${mi.file}"/>
    </bean>
    <bean id="errorResource" class="org.springframework.core.io.FileSystemResource">
        <constructor-arg value="${error.file}"/>
    </bean>
    <bean id="interactionEvidenceReader" class="uk.ac.ebi.intact.dataexchange.dbimporter.reader.InteractionEvidenceFileReader" lazy-init="true">
        <property name="resource" ref="miFileResource"/>
    </bean>
    <bean id="complexReader" class="uk.ac.ebi.intact.dataexchange.dbimporter.reader.ComplexFileReader" lazy-init="true" scope="step">
        <property name="resource" ref="miFileResource"/>
    </bean>
    <bean id="modelledInteractionReader" class="uk.ac.ebi.intact.dataexchange.dbimporter.reader.ModelledInteractionFileReader" lazy-init="true">
        <property name="resource" ref="miFileResource"/>
    </bean>
    <bean id="interactionReader" class="uk.ac.ebi.intact.dataexchange.dbimporter.reader.InteractionFileReader" lazy-init="true">
        <property name="resource" ref="miFileResource"/>
    </bean>

    <!-- processors -->
    <bean id="interactionEvidenceProcessor" class="uk.ac.ebi.intact.dataexchange.dbimporter.processor.IntactEnricherProcessor"
          lazy-init="true">
        <property name="errorResource" ref="errorResource"/>
        <property name="enricher" ref="intactInteractionEvidenceEnricher"/>
    </bean>
    <bean id="complexEnricherProcessor" class="uk.ac.ebi.intact.dataexchange.dbimporter.processor.IntactEnricherProcessor"
          lazy-init="true" scope="step">
        <property name="errorResource" ref="errorResource"/>
        <property name="enricher" ref="intactComplexEnricher"/>
    </bean>
    <bean id="complexDataAdditionProcessor" class="uk.ac.ebi.intact.dataexchange.dbimporter.processor.IntactComplexDataAdditionProcessor"
          lazy-init="true" scope="step">
        <property name="errorResource" ref="errorResource"/>
        <property name="importTag" value="#{jobParameters['MIJobId']}"/>
        <property name="complexService" ref="complexService"/>
    </bean>
    <bean id="complexValidationProcessor" class="uk.ac.ebi.intact.dataexchange.dbimporter.processor.IntactComplexValidationProcessor"
          lazy-init="true" scope="step">
        <property name="errorResource" ref="errorResource"/>
        <property name="complexService" ref="complexService"/>
    </bean>
    <bean id="modelledInteractionProcessor" class="uk.ac.ebi.intact.dataexchange.dbimporter.processor.IntactEnricherProcessor"
          lazy-init="true">
        <property name="errorResource" ref="errorResource"/>
        <property name="enricher" ref="intactModelledInteractionEnricher"/>
    </bean>
    <bean id="interactionProcessor" class="uk.ac.ebi.intact.dataexchange.dbimporter.processor.IntactEnricherProcessor"
          lazy-init="true">
        <property name="errorResource" ref="errorResource"/>
        <property name="enricher" ref="intactInteractionEnricher"/>
    </bean>
    <bean id="interactionMixProcessor" class="uk.ac.ebi.intact.dataexchange.dbimporter.processor.IntactInteractionEnricherCompositeProcessor" lazy-init="true">
        <property name="interactionEvidenceProcessor" ref="interactionEvidenceProcessor"/>
        <property name="modelledInteractionProcessor" ref="modelledInteractionProcessor"/>
        <property name="complexProcessor" ref="complexEnricherProcessor"/>
        <property name="interactionProcessor" ref="interactionProcessor"/>
    </bean>
    <bean id="intactComplexEnricherCompositeProcessor" class="uk.ac.ebi.intact.dataexchange.dbimporter.processor.IntactComplexEnricherCompositeProcessor" lazy-init="true" scope="step">
        <property name="intactComplexDataAdditionProcessor" ref="complexDataAdditionProcessor"/>
        <property name="complexEnricherProcessor" ref="complexEnricherProcessor"/>
        <property name="complexValidationProcessor" ref="complexValidationProcessor"/>
    </bean>
    <!-- writers -->
    <bean id="interactionEvidenceImporter" class="uk.ac.ebi.intact.dataexchange.dbimporter.writer.IntactDbImporter"
          lazy-init="true">
        <property name="intactService" ref="interactionEvidenceService"/>
    </bean>
    <bean id="complexImporter" class="uk.ac.ebi.intact.dataexchange.dbimporter.writer.IntactDbImporter"
          lazy-init="true" scope="step">
        <property name="intactService" ref="complexService"/>
    </bean>
    <bean id="modelledInteractionImporter" class="uk.ac.ebi.intact.dataexchange.dbimporter.writer.IntactDbImporter"
          lazy-init="true">
        <property name="intactService" ref="modelledInteractionService"/>
    </bean>
    <bean id="interactionMixImporter" class="uk.ac.ebi.intact.dataexchange.dbimporter.writer.IntactInteractionMixDbImporter" lazy-init="true"/>

    <!-- Basic Step configuration -->
    <bean id="mailStepListener" class="uk.ac.ebi.intact.dataexchange.dbimporter.listener.MailNotifierStepExecutionListener" scope="prototype" lazy-init="true">
        <property name="mailSender">
            <bean class="org.springframework.mail.javamail.JavaMailSenderImpl">
                <property name="host" value="${intact.notification.email.smtpHost}"/>
            </bean>
        </property>
        <property name="senderAddress" value="${intact.notification.email.sender}"/>
    </bean>

    <!-- Enricher Steps -->
    <batch:step id="interactionEvidenceEnricherStep" parent="basicBatchStep">
        <batch:tasklet transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="interactionEvidenceReader"
                         processor="interactionEvidenceProcessor"
                         writer="interactionEvidenceImporter"
                         commit-interval="50"
                         retry-limit="10">

                <batch:retryable-exception-classes>
                    <batch:include class="org.springframework.web.client.ResourceAccessException"/>
                    <batch:include class="javax.net.ssl.SSLHandshakeException"/>
                </batch:retryable-exception-classes>

                <batch:streams>
                    <batch:stream ref="interactionEvidenceReader"/>
                    <batch:stream ref="interactionEvidenceProcessor"/>
                    <batch:stream ref="interactionEvidenceImporter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <batch:step id="modelledInteractionEnricherStep" parent="basicBatchStep">
        <batch:tasklet transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="modelledInteractionReader"
                         processor="modelledInteractionProcessor"
                         writer="modelledInteractionImporter"
                         commit-interval="50"
                         retry-limit="10">

                <batch:retryable-exception-classes>
                    <batch:include class="org.springframework.web.client.ResourceAccessException"/>
                    <batch:include class="javax.net.ssl.SSLHandshakeException"/>
                </batch:retryable-exception-classes>

                <batch:streams>
                    <batch:stream ref="modelledInteractionReader"/>
                    <batch:stream ref="modelledInteractionProcessor"/>
                    <batch:stream ref="modelledInteractionImporter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <batch:step id="complexEnricherStep" parent="basicBatchStep">
        <batch:tasklet transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="complexReader"
                         processor="intactComplexEnricherCompositeProcessor"
                         writer="complexImporter"
                         commit-interval="50"
                         retry-limit="10">

                <batch:retryable-exception-classes>
                    <batch:include class="org.springframework.web.client.ResourceAccessException"/>
                    <batch:include class="javax.net.ssl.SSLHandshakeException"/>
                </batch:retryable-exception-classes>

                <batch:streams>
                    <batch:stream ref="complexReader"/>
                    <batch:stream ref="complexEnricherProcessor"/>
                    <batch:stream ref="complexValidationProcessor"/>
                    <batch:stream ref="complexDataAdditionProcessor"/>
                    <batch:stream ref="complexImporter"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>
    <batch:step id="interactionEnricherStep" parent="basicBatchStep">
        <batch:tasklet transaction-manager="jamiTransactionManager">
            <batch:listeners>
                <batch:listener ref="basicChunkLoggerListener" />
                <batch:listener ref="mailStepListener"/>
            </batch:listeners>

            <batch:chunk reader="interactionReader"
                         processor="interactionMixProcessor"
                         writer="interactionMixImporter"
                         commit-interval="50"
                         retry-limit="10">

                <batch:retryable-exception-classes>
                    <batch:include class="org.springframework.web.client.ResourceAccessException"/>
                    <batch:include class="javax.net.ssl.SSLHandshakeException"/>
                </batch:retryable-exception-classes>

                <batch:streams>
                    <batch:stream ref="interactionReader"/>
                    <batch:stream ref="interactionMixImporter"/>
                    <batch:stream ref="interactionEvidenceProcessor"/>
                    <batch:stream ref="modelledInteractionProcessor"/>
                    <batch:stream ref="complexEnricherProcessor"/>
                    <batch:stream ref="interactionProcessor"/>
                </batch:streams>
            </batch:chunk>
        </batch:tasklet>
    </batch:step>

    <!-- enricher job -->
    <batch:job id="interactionEvidenceImport" job-repository="basicBatchJobRepository" parent="basicBatchJob">

        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <batch:step id="enrichEvidenceStep" parent="interactionEvidenceEnricherStep"/>
    </batch:job>
    <batch:job id="modelledInteractionImport" job-repository="basicBatchJobRepository" parent="basicBatchJob">

        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <batch:step id="modelledEvidenceStep" parent="modelledInteractionEnricherStep"/>
    </batch:job>
    <batch:job id="complexImport" job-repository="basicBatchJobRepository" parent="basicBatchJob">

        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <batch:step id="complexStep" parent="complexEnricherStep"/>
    </batch:job>
    <batch:job id="interactionMixImport" job-repository="basicBatchJobRepository" parent="basicBatchJob">

        <batch:listeners>
            <batch:listener ref="basicJobLoggerListener"/>
        </batch:listeners>

        <batch:step id="interactionMixStep" parent="interactionEnricherStep"/>
    </batch:job>
</beans>
